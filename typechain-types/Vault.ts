/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface VaultInterface extends utils.Interface {
  functions: {
    "claimGrant(uint256)": FunctionFragment;
    "createGrant(address,string,uint256,address)": FunctionFragment;
    "currentGrantId()": FunctionFragment;
    "grants(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeGrant(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimGrant"
      | "createGrant"
      | "currentGrantId"
      | "grants"
      | "owner"
      | "removeGrant"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimGrant",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGrant",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentGrantId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grants",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeGrant",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "claimGrant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentGrantId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grants", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeGrant",
    data: BytesLike
  ): Result;

  events: {
    "Claim(uint256,address,uint256,address)": EventFragment;
    "Creation(uint256,string,address,uint256,address,uint256,uint256)": EventFragment;
    "Removal(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Creation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Removal"): EventFragment;
}

export interface ClaimEventObject {
  grantId: BigNumber;
  token: string;
  amount: BigNumber;
  recipient: string;
}
export type ClaimEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface CreationEventObject {
  id: BigNumber;
  name: string;
  token: string;
  amount: BigNumber;
  recipient: string;
  start: BigNumber;
  end: BigNumber;
}
export type CreationEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string, BigNumber, BigNumber],
  CreationEventObject
>;

export type CreationEventFilter = TypedEventFilter<CreationEvent>;

export interface RemovalEventObject {
  id: BigNumber;
  token: string;
  amount: BigNumber;
}
export type RemovalEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RemovalEventObject
>;

export type RemovalEventFilter = TypedEventFilter<RemovalEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimGrant(
      grantId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGrant(
      token: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentGrantId(overrides?: CallOverrides): Promise<[BigNumber]>;

    grants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string, BigNumber, BigNumber] & {
        id: BigNumber;
        name: string;
        token: string;
        amount: BigNumber;
        recipient: string;
        start: BigNumber;
        end: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeGrant(
      grantId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimGrant(
    grantId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGrant(
    token: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentGrantId(overrides?: CallOverrides): Promise<BigNumber>;

  grants(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, string, BigNumber, BigNumber] & {
      id: BigNumber;
      name: string;
      token: string;
      amount: BigNumber;
      recipient: string;
      start: BigNumber;
      end: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  removeGrant(
    grantId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimGrant(
      grantId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createGrant(
      token: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentGrantId(overrides?: CallOverrides): Promise<BigNumber>;

    grants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string, BigNumber, BigNumber] & {
        id: BigNumber;
        name: string;
        token: string;
        amount: BigNumber;
        recipient: string;
        start: BigNumber;
        end: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    removeGrant(
      grantId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Claim(uint256,address,uint256,address)"(
      grantId?: null,
      token?: null,
      amount?: null,
      recipient?: null
    ): ClaimEventFilter;
    Claim(
      grantId?: null,
      token?: null,
      amount?: null,
      recipient?: null
    ): ClaimEventFilter;

    "Creation(uint256,string,address,uint256,address,uint256,uint256)"(
      id?: null,
      name?: null,
      token?: null,
      amount?: null,
      recipient?: null,
      start?: null,
      end?: null
    ): CreationEventFilter;
    Creation(
      id?: null,
      name?: null,
      token?: null,
      amount?: null,
      recipient?: null,
      start?: null,
      end?: null
    ): CreationEventFilter;

    "Removal(uint256,address,uint256)"(
      id?: null,
      token?: null,
      amount?: null
    ): RemovalEventFilter;
    Removal(id?: null, token?: null, amount?: null): RemovalEventFilter;
  };

  estimateGas: {
    claimGrant(
      grantId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGrant(
      token: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentGrantId(overrides?: CallOverrides): Promise<BigNumber>;

    grants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeGrant(
      grantId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimGrant(
      grantId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGrant(
      token: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentGrantId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGrant(
      grantId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
